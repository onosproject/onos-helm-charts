# Copyright 2021-present Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{ if or .Values.config.netcfg .Values.config.componentConfig }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-onos-configs-loader
data:
  status_check.sh: |
    #!/bin/sh
    set -euo pipefail

    REPLICAS=$(kubectl -n {{ .Release.Namespace }} get --no-headers sts -lapp={{ .Values.app_label }} -o custom-columns=':.spec.replicas')
    RUNNING_POD=$(kubectl -n {{ .Release.Namespace }} get --no-headers pods -lapp={{ .Values.app_label }} | grep Running | wc -l)
    READY_POD=$(kubectl -n {{ .Release.Namespace }} get --no-headers pods -lapp={{ .Values.app_label }} -o custom-columns=':.status.containerStatuses[*].ready' | grep true | wc -l)
    if ! [ $REPLICAS -eq $RUNNING_POD ]; then
      echo "Not all ONOS Pods are running"
      exit 1
    fi
    if ! [ $REPLICAS -eq $READY_POD ]; then
      echo "Not all ONOS Pods are ready"
      exit 1
    fi
    exit 0
  loader.sh: >
    #/bin/sh
    set -euo pipefail

    USER="{{ .Values.config.username }}"
    PASSWORD="{{ .Values.config.password }}"
    ONOS_V1_URL="http://{{ .Release.Name }}-onos-classic-hs:8181/onos/v1"
    NETCFG_URL="${ONOS_V1_URL}/network/configuration/"
    COMPONENT_CFG_URL="${ONOS_V1_URL}/configuration"
    NETCFG="/opt/configs/netcfg.json"
    RECONCILE_MODE="{{ .Values.config.reconcile_mode }}";

    while true; do
      echo "-----------------------------------------"
      echo "Timestamp is "; date
      echo "-----------------------------------------"
      echo 'Waiting for ONOS Cluster to be ready';
      if ! sh "/opt/loader/status_check.sh" ; then
        sleep 10s;
        continue
      fi

      echo "-----------------------------------------"
      echo "Loading netcfg into ONOS";
      echo "-----------------------------------------"
      cat ${NETCFG}
      # Upper all MAC addresses
      # ONOS will convert all MAC addresses to upper so we have to ensure all MAC addresses are upper in netcfg
      sed -E "s/([[:xdigit:]]{2}:)[[:xdigit:]]{2}/\U&/g" ${NETCFG} > expect_config
      curl -sSL -u $USER:$PASSWORD -X GET --header 'Accept: application/json' $NETCFG_URL | jq > actual_config
      # Update if there is difference between two configs(actual_config and expect_config)
      # Do the one-direction comparison
      # Everything in expect_config should be in the actual_config
      if jd actual_config expect_config | grep "^+"; then
          echo "Update netcfg due to the difference"
          curl -sSL -u $USER:$PASSWORD -X POST -H 'Content-Type: application/json' $NETCFG_URL -d@${NETCFG}
          responseCode=$(curl --write-out '%{http_code}' --fail -sSL -u $USER:$PASSWORD -X POST -H 'Content-Type: application/json' $NETCFG_URL -d@${NETCFG})
          if [[ $responseCode == 207 ]]; then
            echo "Failed to load NETCFG, skip this round and try again later"
          else
            echo "Updated netcfg is:";
            curl -sSL -u $USER:$PASSWORD -X GET --header 'Accept: application/json' $NETCFG_URL | jq
          fi
      else
        echo "Update is unnecessary since the netcfg on the ONOS cluster is up to date"
      fi

      echo "-----------------------------------------"
      echo "Loading component configs into ONOS";
      echo "-----------------------------------------"
      CFGS=$(ls /opt/configs | grep -v netcfg.json);
      for CFG in ${CFGS};
      do
        CFG_FILE="/opt/configs/$CFG"
        echo "-----------------------------------------"
        echo "Check that component $CFG is active";
        echo "-----------------------------------------"
        until curl --fail -sSL -u $USER:$PASSWORD -X GET "${COMPONENT_CFG_URL}/$CFG";
        do
          echo "Waiting for $CFG to be active";
          sleep 5;
        done

        echo "Prepare to update $CFG config"
        cat $CFG_FILE
        curl --fail -sSL -u $USER:$PASSWORD -X GET "${COMPONENT_CFG_URL}/$CFG"  | jq --arg key "${CFG}" '.[$key]' > actual_config
        # Update if there is difference between two configs(actual_config and expect_config)
        # Do the one-direction comparison
        # Everything in expect_config should be in the actual_config
        if jd actual_config ${CFG_FILE} | grep "^+"; then
          echo "Update $CFG config"
          responseCode=$(curl --write-out '%{http_code}' --fail -sSL -u $USER:$PASSWORD -X POST "${COMPONENT_CFG_URL}/$CFG" -H Content-type:application/json -d @${CFG_FILE});
          if [[ $responseCode == 207 ]]; then
            echo "Failed to load $CFG, skip this round and try again later"
          else
            echo "Updated Component config for $CFG is:";
            curl --fail -sSL -u $USER:$PASSWORD -X GET "${COMPONENT_CFG_URL}/$CFG";
          fi
        else
          echo "Update is unnecessary since the $CFG on the ONOS cluster is up to date"
        fi
      done

      if [ "${RECONCILE_MODE}" != "true" ]; then
        echo "Break from reconcile loop";
        break;
      fi

      echo "Completed on: ";
      date;
      sleep {{ .Values.config.reconcile_interval }}
    done

    echo "For non-reconcile_mode, keep running to act as daemon;"

    sleep infinite

{{ end }}
