# Fetch netcfg from pod config repository and push to ONOS once it is READY
{{ if .Values.config }}
{{ $configDir := "/config" }}
apiVersion: v1
kind: Pod
metadata:
  name: config
spec:
  initContainers:
    # Wait for ONOS to be fully ready
    - name: wait-onos
      image: opennetworking/utils:bash-curl-jq
      env:
        - name: USER
          valueFrom:
            secretKeyRef:
              name: onos-secret
              key: username
        - name: PASSWD
          valueFrom:
            secretKeyRef:
              name: onos-secret
              key: password
        - name: URL
          value: {{ .Values.config.clusterUrl }}
        - name: INSTANCES
          # Need this to get around hyphenated name
          value: {{ index .Values "onos-classic" "replicas" | quote }}
      command: ["sh", "-c", "until [ $(curl -s $URL -u $USER:$PASSWD | jq '.nodes | .[] | .status' | grep -c READY) -eq $INSTANCES ]; do echo 'Waiting for ONOS'; sleep 5; done;" ]
    # Pull config from the git repository
    - name: config-getter
      image: alpine/git
      env:
        - name: USER
          valueFrom:
            secretKeyRef:
              name: git-secret
              key: username
        - name: PASSWD
          valueFrom:
            secretKeyRef:
              name: git-secret
              key: password
        - name: GIT_SERVER
          value: {{ .Values.config.server }}
        - name: GIT_REPO
          value: {{ .Values.config.repo }}
      workingDir: {{ $configDir }}
      command: ["sh", "-c", "git clone https://$USER:$PASSWD@$GIT_SERVER/$GIT_REPO"]
      volumeMounts:
        - name: config-dir
          mountPath: {{ $configDir }}
  containers:
    # Push config to ONOS REST API
    - name: config-setter
      image: curlimages/curl
      env:
        - name: USER
          valueFrom:
            secretKeyRef:
              name: onos-secret
              key: username
        - name: PASSWD
          valueFrom:
            secretKeyRef:
              name: onos-secret
              key: password
        - name: NETCFG_URL
          value: {{ .Values.config.netcfgUrl }}
        - name: CFG_FOLDER
          value: {{ .Values.config.folder }}
        - name: CFG_FILE
          value: {{ .Values.config.file }}
      workingDir: {{ printf "%s/%s" $configDir .Values.config.repo }}
      command: ["sh", "-c", "curl -v -u $USER:$PASSWD POST -H 'Content-Type: application/json' $NETCFG_URL -d@$CFG_FOLDER/$CFG_FILE"]
      volumeMounts:
        - name: config-dir
          mountPath: {{ $configDir }}
  volumes:
  - name: config-dir
    emptyDir: {}
  restartPolicy: Never
{{ end }}
