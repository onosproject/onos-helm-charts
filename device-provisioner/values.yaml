# SPDX-FileCopyrightText: 2022-present Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0


# Default values for device-provisioner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  image:
    registry: ""
    tag: ""
  store:
    consensus:
      name: ""
      image:
        registry: ""
        tag: ""

atomix:
  replicas: 0

store:
  raft:
    replicas: 1
    partitions: 30
    image:
      repository: atomix/multi-raft-node
      tag: latest
      pullPolicy: ""
      pullSecrets: []
    config: {}
    log:
      storageClass: ""
      resources:
        requests:
          storage: 2Gi
    securityContext: {}

replicaCount: 1

p4Plugins:
  - name: middleblock
    version: 1.0.0


image:
  registry: ""
  repository: onosproject/device-provisioner
  tag: '{{ .Chart.AppVersion }}'
  pullPolicy: IfNotPresent
  pullSecrets: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "device-provisioner"

debug: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

logging:
  loggers:
    root:
      level: info
      output:
        stdout:
          sink: stdout
    onos/grpc/retry:
      level: error
    atomix/grpc/retry:
      level: error
  sinks:
    stdout:
      type: stdout
      stdout: {}


