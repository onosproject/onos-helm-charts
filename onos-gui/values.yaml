# Default values for onos-gui.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: onosproject/onos-gui
  tag: v0.6.9
  pullPolicy: IfNotPresent
  pullSecrets: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "onos-gui"

## Client service.
service:
  enabled: true
  ## Service name is user-configurable for maximum service discovery flexibility.
  name: onos-gui
  type: LoadBalancer
  external:
    nodePort: 31180

ingress:
  enabled: true

ports:
  web:
    containerPort: 80
    protocol: TCP

# Enable by giving a value like http://dex:32000
# make sure this is reachable at http://dex:32000/.well-known/openid-configuration
openidc:
  issuer:

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

onosservices:
  onos-topo:
    grpc: 5150
    proxy: 8081
    streamTimeout: 3600
  onos-config:
    grpc: 5150
    proxy: 8082
    streamTimeout: 3600
  onos-ric:
    grpc: 5150
    proxy: 8083
    streamTimeout: 360
  ran-simulator:
    grpc: 5150
    proxy: 8084
    streamTimeout: 3600
#  control:
#    grpc: 5150
#    proxy: 8082

Envoy:
  # Inspired by https://github.com/helm/charts/blob/master/stable/envoy/values.yaml
  image:
    repository: envoyproxy/envoy
    tag: v1.11.1
    pullPolicy: IfNotPresent

  command:
    - /usr/local/bin/envoy
  args:
    - -l
    - $loglevel
    - -c
    - /config/envoy.yaml

  ports:
    admin:
      containerPort: 9901
      protocol: TCP

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
  #   cpu: 100m
  #   memory: 128Mi

  priorityClassName: ""

  nodeSelector: {}

  tolerations: []

  affinity: {}
    # podAntiAffinity:
    #   preferredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 50
    #       podAffinityTerm:
    #         topologyKey: failure-domain.beta.kubernetes.io/zone
    #         labelSelector:
    #           matchLabels:
    #             release: envoy
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 40
    #       topologyKey: "kubernetes.io/hostname"
    #       labelSelector:
  #         matchLabels:
  #           release: envoy

  ## ref: https://github.com/envoyproxy/envoy/pull/2896
  podAnnotations: {}
    # prometheus.io/scrape: "true"
  # prometheus.io/path: "/stats/prometheus"
  # prometheus.io/port: "9901"

  podLabels: {}
  # team: "developers"
  # service: "envoy"

  livenessProbe:
    tcpSocket:
      port: admin
    initialDelaySeconds: 30
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 3
    # successThreshold: 1

  readinessProbe:
    tcpSocket:
      port: admin
    initialDelaySeconds: 30
    # periodSeconds: 10
    # timeoutSeconds: 5
    # failureThreshold: 3
    # successThreshold: 1

  securityContext: {}

  env: {}

  ## ServiceMonitor consumed by prometheus-operator
  serviceMonitor:
    ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
    enabled: false
    interval: "15s"
    targetLabels: []
    podTargetLabels: []
    ## Namespace in which the service monitor is created
    # namespace: monitoring
    # Added to the ServiceMonitor object so that prometheus-operator is able to discover it
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    additionalLabels: {}

  ### Lifecycle Events
  lifecycle: {}
  #  preStop:
  #    exec:
  #      command:
  #      - sh
  #      - -c
  #      - "sleep 60"

  templates:
    envoy.yaml: |-
      ## refs:
      ## - https://www.envoyproxy.io/docs/envoy/latest/start/start#quick-start-to-run-simple-example
      ## - https://raw.githubusercontent.com/envoyproxy/envoy/master/configs/google_com_proxy.v2.yaml
      admin:
        access_log_path: /tmp/admin_access.log
        address:
          socket_address: { address: 0.0.0.0, port_value: 9901 }

      static_resources:
        listeners:
        {{- range $key, $value := .Values.onosservices }}
          - name: listener_{{$key}}
            address:
              socket_address: { address: 0.0.0.0, port_value: {{ $value.proxy }} }
            filter_chains:
              - filters:
                  - name: envoy.http_connection_manager
                    config:
                      codec_type: auto
                      stat_prefix: ingress_http
                      route_config:
                        name: local_route
                        virtual_hosts:
                          - name: local_service
                            domains: ["*"]
                            routes:
                              - match: { prefix: "/" }
                                route:
                                  cluster: {{ $key }}_service
                                  max_grpc_timeout: 0s
                            cors:
                              allow_origin:
                                - "*"
                              allow_methods: GET, PUT, DELETE, POST, OPTIONS
                              allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                              max_age: "1728000"
                              expose_headers: custom-header-1,grpc-status,grpc-message
                      http_filters:
                        - name: envoy.grpc_web
                        - name: envoy.cors
                        - name: envoy.router
                      stream_idle_timeout: 3600s
        {{- end }}
        clusters:
        {{- range $key, $value := .Values.onosservices }}
          - name: {{ $key }}_service
            connect_timeout: 0.25s
            type: logical_dns
            http2_protocol_options: {}
            lb_policy: round_robin
            # win/mac hosts: Use address: host.docker.internal instead of address: localhost in the line below
            hosts: [{ socket_address: { address: {{$key}}, port_value: {{ $value.grpc }} }}]
            tls_context:
              common_tls_context:
                tls_certificates:
                  certificate_chain: { "filename": "/etc/envoy-proxy/certs/tls.crt" }
                  private_key: { "filename": "/etc/envoy-proxy/certs/tls.key" }
                validation_context:
                  trusted_ca: { filename: "/etc/envoy-proxy/certs/tls.cacrt" }
        {{- end }}

Nginx:
  templates:
    server-block.conf: |-
      server {
          listen 80;
          ssl_certificate /usr/share/certs/onos-gui.crt;
          ssl_certificate_key /usr/share/certs/onos-gui.key;
          location / {
            root /usr/share/nginx/html;
          }
          location ~ \.(html|js|ico|map|css|png|woff|woff2)$ {
            root /usr/share/nginx/html;
          }
          location /rs/nav/uiextensions {
            root /usr/share/nginx/html;
          }
          location /kubernetes-api/ {
              proxy_pass http://localhost:8001/;
              proxy_http_version 1.1;
          }
          {{- range $key, $value := .Values.onosservices }}
          location /{{ $key }}/ {
              proxy_pass http://localhost:{{ $value.proxy }}/;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "Upgrade";
              proxy_connect_timeout       {{ $value.streamTimeout }};
              proxy_send_timeout          {{ $value.streamTimeout }};
              proxy_read_timeout          {{ $value.streamTimeout }};
              send_timeout                {{ $value.streamTimeout }};
          }
          {{ end }}
      }
